#!/usr/bin/python
import subprocess
import bibtexparser
import struct
import re
import sys
from bibtexparser.bparser import BibTexParser
from bibtexparser.customization import convert_to_unicode

# DEFAULT CONFIG SECTION
document_dir = '/home/thorsten/uni/literatur'
bibfile = document_dir + '/' + 'refs.bib'
rofi_command = [ 'rofi' , '-dmenu', '-i' , '-eh', '2', '-no-custom' ]
rofi_command += [ '-lines', '10', '-normal-window' ]
rofi_command += [ '-p', 'Open:' ]

# accepts a list of strings and returns the index of the selected menu entry
# or None otherwise
def call_rofi(entries):
    additional_args = [ '-sep', '\\0', '-format', 'i' ]
    proc = subprocess.Popen(rofi_command + additional_args,
                            stdin=subprocess.PIPE,
                            stdout=subprocess.PIPE)
    for e in entries:
        proc.stdin.write((e).encode('utf-8'))
        proc.stdin.write(struct.pack('B', 0))
    proc.stdin.close()
    answer = proc.stdout.read().decode("utf-8")
    # trim whitespace
    answer = re.sub('[ \n]', '', answer)
    if answer == '':
        return None
    else:
        return int(answer)

def fix_string(string):
    string = re.sub('[\s+]', ' ', string)
    string = re.sub('[`\\\\{}]', '', string)
    return string

def reorder_author_name(author):
    parts = author.split(', ')
    parts.reverse()
    return ' '.join(parts)

def format_author(author):
    author = fix_string(author)
    authors = author.split(' and ')
    authors = [ reorder_author_name(i) for i in authors ]
    return ', '.join(authors)

def find_files(directory):
    cmd = [ 'find' , directory, '-type', 'f', '-printf', '%Ts %P\\0' ]
    proc = subprocess.Popen(cmd, stdout=subprocess.PIPE)
    byte_string = proc.stdout.read().split(b'\0')
    byte_string = filter(None, byte_string) # remove empty (byte)strings from list
    files = list(map(lambda x: x.decode('utf-8').split(' ', 1), byte_string))
    for f in files:
        f[0] = int(f[0])
    files.sort()
    files[:] = [f[1] for f in files]
    return files

# for a bibtex entry -- as a dictionary -- return a list of possible filenames
def generate_filenames(entry):
    yield entry['ID']
    authors = fix_string(entry.get('author', ''))
    authors = authors.split(' and ')
    lastnames = []
    # get last names of authors
    for i, name in enumerate(authors):
        s = reorder_author_name(name)
        if (s == ''):
            continue
        s = s.rsplit(None, 1)
        if (len(s) > 1):
            lastnames.append(s[-1])
        else:
            lastnames.append(s[0])
    year = entry.get('year', '')
    title = re.sub(':', '', fix_string(entry.get('title', '')))
    if len(lastnames) > 0 and bool(year):
        first_sep = ' '
    else:
        first_sep = ''
    part1 = ','.join(lastnames) + first_sep + year
    if bool(part1) and bool(title):
        # if first half of the string and the title is non-empty:
        second_sep = ': '
    else:
        second_sep = ''
    yield  part1 + second_sep + title

# gets a list of filenames (relative to the document_dir) and returns a list of
# files of documents only
def filter_documents(filenames):
    r = re.compile('.*\.pdf$', re.IGNORECASE)
    return list(filter(r.match, filenames))

# TODO: load user configuration here.

with open(bibfile) as bibtex_file:
    parser = BibTexParser()
    parser.customization = convert_to_unicode
    bib_database = bibtexparser.load(bibtex_file, parser=parser)
    documents = filter_documents(find_files(document_dir))
    menu = []
    is_file = []
    for e in bib_database.entries:
        s = fix_string(e.get('title', e.get('ID', '?'))) + '\n'
        s += format_author(e.get('author', '?')) + ' ' + e.get('year', '')
        menu.append(s)
        is_file.append(False)
    menu.extend(documents)
    is_file.extend([True] * len(documents))
    idx = call_rofi(menu)
    if idx == None:
        sys.exit(0)
    if is_file[idx] == True:
        filepath = document_dir + '/' + menu[idx]
        print('opening: ' + filepath)
    else:
        # selected item was bib entry
        for f in generate_filenames(bib_database.entries[idx]):
            print(f)
    #print(bib_database.entries)

